<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: NodeJS | ithans]]></title>
  <link href="http://www.ithans.com/tags/nodejs/atom.xml" rel="self"/>
  <link href="http://www.ithans.com/"/>
  <updated>2013-11-16T17:58:18+08:00</updated>
  <id>http://www.ithans.com/</id>
  <author>
    <name><![CDATA[邵寒超]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[node.js Connection lost The server closed the connection.]]></title>
    <link href="http://www.ithans.com/blog/2013/07/07/mysql-connection-lost/"/>
    <updated>2013-07-07T00:00:00+08:00</updated>
    <id>http://www.ithans.com/blog/2013/07/07/mysql-connection-lost</id>
    <content type="html"><![CDATA[<h3>mysql模块</h3>

<p>今天访问了下内网的一台服务器，发现挂掉了，SSH上去看了下<code>nohup.out</code>,发现报错了
```haskell</p>

<pre><code>events.js:71
        throw arguments[1]; // Unhandled 'error' event
                       ^
Error: Connection lost: The server closed the connection.
    at Protocol.end (/var/www/html/utci/node_modules/mysql/lib/protocol/Protocol.js:73:13)
    at Socket.onend (stream.js:66:10)
    at Socket.EventEmitter.emit (events.js:126:20)
    at TCP.onread (net.js:417:51)
</code></pre>

<p>```</p>

<p>这个错误的大概意思就是，未处理的<code>error</code>事件</p>

<p>原因是：mysql的连接久了以后，超时了。</p>

<p>解决方法是：</p>

<p>增加<code>error</code>事件的监听</p>

<p>database.js:</p>

<p>```javascript</p>

<pre><code>var mysql = require('mysql'),
    settings = require('../settings');

module.exports.getConnection = function () {
    if ((module.exports.connection) &amp;&amp; (module.exports.connection._socket)
        &amp;&amp; (module.exports.connection._socket.readable)
        &amp;&amp; (module.exports.connection._socket.writable)) {
        return module.exports.connection;
    }
    console.log(((module.exports.connection) ?
        "UNHEALTHY SQL CONNECTION; RE" : "") + "CONNECTING TO SQL.");
    var connection = mysql.createConnection({
        host: settings.host,
        port: settings.port,
        database: settings.db_name,
        user: settings.username,
        password: settings.password,
        //中文读取
        charset: "utf8"
    });
    connection.connect(function (err) {
        if (err) {
            console.log("SQL CONNECT ERROR: " + err);
        } else {
            console.log("SQL CONNECT SUCCESSFUL.");
        }
    });
    connection.on("close", function (err) {
        console.log("SQL CONNECTION CLOSED.");
    });
    connection.on("error", function (err) {
        console.log("SQL CONNECTION ERROR: " + err);
    });
    module.exports.connection = connection;
    return module.exports.connection;
};

// Open a connection automatically at app startup.
module.exports.getConnection();
// If you've saved this file as database.js, then get and use the
// connection as in the following example:
// var database = require(__dirname + "/database");
// var connection = database.getConnection();
// connection.query(query, function(err, results) { ....
</code></pre>

<h2>```</h2>

<p>伊泽<br/>
2013-07-07于杭州</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎么使用grunt-tps]]></title>
    <link href="http://www.ithans.com/blog/2013/05/28/how-to-use-grunt-tps/"/>
    <updated>2013-05-28T00:00:00+08:00</updated>
    <id>http://www.ithans.com/blog/2013/05/28/how-to-use-grunt-tps</id>
    <content type="html"><![CDATA[<h3>grunt-tps是什么。</h3>

<p>首先来说下TPS是什么，TPS的全称是Taobao Pictures System，中文意思就是淘宝图片系统，主要用于存放图片，当然也可以存放其他的东西。</p>

<p>而grunt-tps就是tps的grunt插件，基于tpsmate，只需要经过简单的配置，就可以用grunt进行自动化管理。</p>

<h3>为什么要用grunt-tps</h3>

<ol>
<li><strong>自动化</strong>，特别是当你的需要替换的目录是在一个文件夹下的，可以直接使用<code>xx/**/*</code>这样的方式。</li>
<li>和grunt结合，grunt是个大趋势，使用grunt进行将平时一些反复劳动交给工具去做，提高工作效率。所有的事情，一行<code>grunt</code>搞定，简单轻松愉快。</li>
<li>减少出错率，人工上传替换，难免会出现错误。</li>
</ol>


<h3>tpsmate是什么？</h3>

<p>TPS Mate是TPS系统的命令行版本。其中命令行版本基于python，当前功能主要包括上传单张图片、批量上传图片以及样式文件中背景图片的批量上传以及输出。其目的主要为减少手工替换以及为可能出现的前端打包工具提供更为有效的支持。</p>

<h3>怎么安装tpsmate</h3>

<p>首先要安装<code>python</code>，<a href="">http://www.python.org/download/</a></p>

<h4>使用tpsmate需要具备的条件：</h4>

<ol>
<li>淘宝内部环境，需要可以访问tms.taobao.com</li>
<li>有上传图片至tps的权限，看下你能否在<a href="http://tps.tms.taobao.com/photo/index.htm">这里</a>上传图片</li>
</ol>


<h3>怎么使用grunt-tps</h3>

<p>如果你以前从来没有用过<a href="http://gruntjs.com/">Grunt</a>，推荐你看看Grunt的<a href="http://gruntjs.com/getting-started">Getting Start</a></p>

<p>如何安装grunt？</p>

<p>```haskell</p>

<pre><code>npm uninstall -g grunt
npm install -g grunt-cli
</code></pre>

<p>```</p>

<p>接下来就是要安装grunt-tps
```haskell</p>

<pre><code>npm install grunt --save-dev
npm install grunt-tps --save-dev
</code></pre>

<p>```</p>

<p>你的Gruntfile.js中加入这一段</p>

<p>```javascript</p>

<pre><code>tps: {
options: {
    argv: "--inplace",
},
all: ['test.css', 'lib/**/*.css', 'test/**/*.scss','index.htm']
}
</code></pre>

<p>```</p>

<p>你的Gruntfile.js中，看起来应该这样的</p>

<p>```javascript</p>

<pre><code>'use strict';
module.exports = function (grunt) {
    // Project configuration.
    grunt.initConfig({
        // Configuration to be run (and then tested).
        tps: {
            options: {
                argv: "--inplace"
            },
            all: ['test.css', 'lib/**/*', 'test/**/*.scss','index.htm']
        }
    });
    grunt.loadNpmTasks('grunt-tps');
    grunt.registerTask('default', ['tps']);
};
</code></pre>

<p>```</p>

<ul>
<li><code>argv</code>是tpsmate的参数，比如<code>--inplace</code>(用tps路径「线上路径」替换本地路径)，参考tpsmate的命令行方式</li>
</ul>


<p>grunt-tps源码地址:<a href="">https://github.com/yize/grunt-tps</a></p>

<hr />

<p>伊泽<br/>
2013-5-28于杭州</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[popular nodejs modules]]></title>
    <link href="http://www.ithans.com/blog/2013/05/20/popular-nodejs-modules/"/>
    <updated>2013-05-20T00:00:00+08:00</updated>
    <id>http://www.ithans.com/blog/2013/05/20/popular-nodejs-modules</id>
    <content type="html"><![CDATA[<p>just for memory</p>

<ul>
<li><strong>colors</strong> <a href="">https://github.com/marak/colors.js/</a></li>
</ul>


<p><code>javascript
var colors = require('./colors');
console.log('hello'.green); // outputs green text
console.log('i like cake and pies'.underline.red) // outputs red underlined text
console.log('inverse the color'.inverse); // inverses the color
console.log('OMG Rainbows!'.rainbow); // rainbow (ignores spaces)
</code></p>

<ul>
<li><strong>mkdirp</strong> <a href="">https://github.com/substack/node-mkdirp</a></li>
</ul>


<p>```javascript
var mkdirp = require(&lsquo;mkdirp&rsquo;);
mkdirp(&lsquo;/tmp/foo/bar/baz&rsquo;, function (err) {
if (err) console.error(err)</p>

<pre><code>else console.log('pow!')
</code></pre>

<p>});
```
&ndash; <strong> iconv-lite </strong> <a href="">https://github.com/ashtuchkin/iconv-lite</a></p>

<p>```javascript
var iconv = require(&lsquo;iconv-lite&rsquo;);</p>

<p>// Convert from an encoded buffer to string.
str = iconv.decode(buf, &lsquo;win1251&rsquo;);</p>

<p>// Convert from string to an encoded buffer.
buf = iconv.encode(&ldquo;Sample input string&rdquo;, &lsquo;win1251&rsquo;);
```
&ndash; <strong> send </strong> <a href="">https://github.com/visionmedia/send</a></p>

<p>```javascript
var http = require(&lsquo;http&rsquo;);
var send = require(&lsquo;send&rsquo;);
var url = require(&lsquo;url&rsquo;);</p>

<p>var app = http.createServer(function(req, res){
  // your custom error-handling logic:
  function error(err) {</p>

<pre><code>res.statusCode = err.status || 500;
res.end(err.message);
</code></pre>

<p>  }</p>

<p>  // your custom directory handling logic:
  function redirect() {</p>

<pre><code>res.statusCode = 301;
res.setHeader('Location', req.url + '/');
res.end('Redirecting to ' + req.url + '/');
</code></pre>

<p>  }</p>

<p>  // transfer arbitrary files from within
  // /www/example.com/public/*
  send(req, url.parse(req.url).pathname)
  .root(&lsquo;/www/example.com/public&rsquo;)
  .on(&lsquo;error&rsquo;, error)
  .on(&lsquo;directory&rsquo;, redirect)
  .pipe(res);
}).listen(3000);
```
&ndash; <strong> connect </strong> <a href="">https://github.com/senchalabs/connect</a></p>

<p>```javascript
var connect = require(&lsquo;connect&rsquo;)
  , http = require(&lsquo;http&rsquo;);</p>

<p>var app = connect()
  .use(connect.favicon())
  .use(connect.logger(&lsquo;dev&rsquo;))
  .use(connect.static(&lsquo;public&rsquo;))
  .use(connect.directory(&lsquo;public&rsquo;))
  .use(connect.cookieParser())
  .use(connect.session({ secret: &lsquo;my secret here&rsquo; }))
  .use(function(req, res){</p>

<pre><code>res.end('Hello from Connect!\n');
</code></pre>

<p>  });</p>

<p>http.createServer(app).listen(3000);</p>

<h2>```</h2>

<p>伊泽<br/>
2013-5-20于杭州</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[env node\r No such file or directory]]></title>
    <link href="http://www.ithans.com/blog/2013/05/18/fix-node-r-No-such-file-or-directory-problem/"/>
    <updated>2013-05-18T00:00:00+08:00</updated>
    <id>http://www.ithans.com/blog/2013/05/18/fix-node-r-No-such-file-or-directory-problem</id>
    <content type="html"><![CDATA[<p>env: node\r: No such file or directory</p>

<p>uitest是基于nodejs的，用<code>npm install uitest -g</code>安装完之后，在mac下运行，提示<code>env: node\r: No such file or directory</code>，检查了下bin文件中，第一行是</p>

<p>```haskell</p>

<h1>! /usr/bin/env node</h1>

<p>```
这看起来是没有任何问题的，当然是肉眼看起来。</p>

<p>问题的分析：</p>

<p>env：node\r</p>

<p>注意下这里的\r，好眼熟，是个换行，原谅我对DOS不是很了解。。。</p>

<p>google了下发现找到了<a href="https://github.com/foglcz/tscw/issues/1">这个</a></p>

<p>里面提到，用dos2unix转换下就可以了。</p>

<p>我的机器上没装dos2unix，用brew装了个</p>

<p><code>haskell
brew install dos2unix
</code>
接着cd到 bin目录下</p>

<p><code>haskell
sudo dos2unix uitest
</code>
就可以了</p>

<hr />

<p>伊泽<br/>
2013-5-18于杭州</p>
]]></content>
  </entry>
  
</feed>
